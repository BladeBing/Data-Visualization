plt.scatter(data = df, x = 'num_var1', y = 'num_var2')

Alternative Approach
Seaborn's regplot function combines scatterplot creation with regression function fitting:

sb.regplot(data = df, x = 'num_var1', y = 'num_var2')

#If we have a very large number of points to plot or our numeric variables are discrete-valued, 
#then it is possible that using a scatterplot straightforwardly will not be informative
#we may want to employ transparency and jitter to make the scatterplot more informative. Transparency can be
#added to a scatter call by adding the "alpha" parameter set to a value between 0 (fully transparent, not visible) and 1 (fully opaque).

plt.scatter(data = df, x = 'disc_var1', y = 'disc_var2', alpha = 1/5)

#As an alternative or companion to transparency, we can also add jitter to move the position of each point slightly from its true value. 
#This is not a direct option in matplotlib's scatter function, but is a built-in option with seaborn's regplot function. 
#x- and y- jitter can be added independently, and won't affect the fit of any regression function, if made:

sb.regplot(data = df, x = 'disc_var1', y = 'disc_var2', fit_reg = False,
           x_jitter = 0.2, y_jitter = 0.2, scatter_kws = {'alpha' : 1/3})
           
#A heat map is a 2-d version of the histogram that can be used as an alternative to a scatterplot.
plt.figure(figsize = [12, 5])

# left plot: scatterplot of discrete data with jitter and transparency
plt.subplot(1, 2, 1)
sb.regplot(data = df, x = 'disc_var1', y = 'disc_var2', fit_reg = False,
           x_jitter = 0.2, y_jitter = 0.2, scatter_kws = {'alpha' : 1/3})

# right plot: heat map with bin edges between values
plt.subplot(1, 2, 2)
bins_x = np.arange(0.5, 10.5+1, 1)
bins_y = np.arange(-0.5, 10.5+1, 1)
plt.hist2d(data = df, x = 'disc_var1', y = 'disc_var2',
           bins = [bins_x, bins_y])
plt.colorbar();

# The most convenient way of doing this is to set the "cmap" value as a string referencing a built-in Matplotlib palette.
#A list of valid strings can be found on this part of the Pyplot API documentation.


# add annotations to cells in the plot indicating the count of points in each cell
# hist2d returns a number of different variables, including an array of counts
bins_x = np.arange(0.5, 10.5+1, 1)
bins_y = np.arange(-0.5, 10.5+1, 1)
h2d = plt.hist2d(data = df, x = 'disc_var1', y = 'disc_var2',
               bins = [bins_x, bins_y], cmap = 'viridis_r', cmin = 0.5)
counts = h2d[0]

# loop through the cell counts and add text annotations for each
for i in range(counts.shape[0]):
    for j in range(counts.shape[1]):
        c = counts[i,j]
        if c >= 7: # increase visibility on darkest cells
            plt.text(bins_x[i]+0.5, bins_y[j]+0.5, int(c),
                     ha = 'center', va = 'center', color = 'white')
        elif c > 0:
            plt.text(bins_x[i]+0.5, bins_y[j]+0.5, int(c),
                     ha = 'center', va = 'center', color = 'black')
