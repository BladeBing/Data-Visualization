## A basic bar chart of frequencies can be created through the use of seaborn's countplot function:

import seaborn as sns
sns.countplot(data = df, x='columns',color=base_color, order=cat_order)

##color_palette returns a list of RGB tuples. 
##Each tuple consists of three digits specifying the red, green, and blue channel values to specify a color.

base_color = sb.color_palette()[0]  ##make a color to base_color

##order parameter also can help us to sort the values in the way you like usually it sorted by descending from right to left

##By default, seaborn's countplot function will summarize and plot the data in terms of absolute frequency, or pure counts. 
##In certain cases, you might want to understand the distribution of data or want to compare levels in terms of proportions of the whole. 
##In this case, you will want to plot the data in terms of relative frequency, 
##where the height indicates the proportion of data taking each level, rather than the absolute count.

##One method of plotting the data in terms of relative frequency on a bar chart is 
##to just relabel the counts axis in terms of proportions.

plt.yticks(position, values)
plt.ylabel('proportion')

## variatoion: text annotations to label the frequencies on bars instead. 
##This requires writing a loop over the tick locations and labels and adding one text element for each bar.

# create the plot
base_color = sb.color_palette()[0]
sb.countplot(data = df, x = 'cat_var', color = base_color)

# add annotations
n_points = df.shape[0]
cat_counts = df['cat_var'].value_counts()
locs, labels = plt.xticks() # get the current tick locations and labels

# loop through each pair of locations and labels
for loc, label in zip(locs, labels):

    # get the text property for the label to get the correct count
    count = cat_counts[label.get_text()]
    pct_string = '{:0.1f}%'.format(100*count/n_points)

    # print the annotation just below the top of the bar
    plt.text(loc, count-8, pct_string, ha = 'center', color = 'w')
    
##use the .get_text() method to obtain the category name, so I can get the count of each category level. At the end, 
##I use the text function to print each percentage, with the x-position, y-position, and string as the three main parameters to the function.

